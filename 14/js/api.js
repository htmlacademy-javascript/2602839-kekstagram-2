/**
 * ! Задача

 * * Отказаться от использования временных данных для разработки и создать модуль для работы с сервером.

 * *  Создайте новый модуль и опишите в нём функции взаимодействия c удалённым сервером с помощью fetch для получения и отправки данных. Актуальный адрес сервера вы найдёте в техзадании.

 * *  Подключите модуль в проект.

 * ! Получение данных

 * *   Доработайте модуль для отрисовки фотографий так, чтобы в качестве данных использовались не случайно сгенерированные объекты, а те данные, которые вы загрузите с удалённого сервера.

 * *   Добавьте обработку возможных ошибок при загрузке.

 * ! Отправка данных

 * TODO Сейчас наша форма работает просто: при нажатии на кнопку «Опубликовать» происходит перенаправление на адрес, указанный в атрибуте action. Это не совсем удобно, и если оставить всё как есть, пользователю придётся самостоятельно возвращаться назад. Стоит ли говорить, что это далеко не оптимальное решение. Поэтому данные из формы мы будем передавать с помощью AJAX.

 * TODO   Добавьте обработчик отправки формы, если ещё этого не сделали, который бы отменял действие формы по умолчанию и отправлял данные формы посредством fetch на сервер.

 * TODO   Реализуйте возвращение формы в исходное состояние при успешной отправке, а также показ сообщения пользователю.

 * TODO   Если при отправке данных произошла ошибка запроса, покажите соответствующее сообщение.

 * TODO   Доработайте обработчик закрытия формы, чтобы кроме закрытия формы он сбрасывал введённые пользователем данные и возвращал форму в исходное состояние. Аналогичным образом обработайте нажатие на кнопку сброса.
 */

// Получение данных
import { showAlert } from './utils';

const URL = 'https://31.javascript.htmlacademy.pro/kekstagram';

const Route = {
  GET: '/data',
  POST: '',
};

const Method = {
  GET: 'GET',
  POST: 'POST'
};

const ErrorText = {
  GET: 'Не удалось загрузить данные. Попробуйте обновить страницу',
  POST: 'Не удалось отправить форму. Попробуйте еще раз',
};

const load = async (route, errorText, method = Method.GET, body = null) => {
  try {
    const response = await fetch(`${URL}${route}`, {method, body});
    if (!response.ok) {
      throw new Error();
    }
    return response.json();
  } catch {
    showAlert(errorText);
    throw new Error(errorText);
  }
};

const getData = () => load(Route.GET, ErrorText.GET);

const sendData = (body) => load(Route.POST, ErrorText.POST, Method.POST, body);

const data = await getData();

export {getData, sendData, data};

